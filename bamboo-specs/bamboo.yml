---
version: 2
plan:
  project-key: TESTING
  key: TESTLXC
  name: FRR LXC Container Testing

variables:
  bamboo_ci_script_verbose: YES

stages:
  - Version_Stage:
      jobs:
        - Save_Build_Version
  - Building_LXC:
      jobs:
        - Build_Ubuntu1804_amd64

Save_Build_Version:
  requirements:
    - buildnode_type: lxc

  artifacts:
    -
      name: SourceVersion
      pattern: 'README.SourceVersion.txt'
      required: true
      shared: true

  tasks:
    - clean

    - script:
        interpreter: shell
        scripts:
          - "#!/usr/bin/env bash"
          # For Debugging define the ci_script_verbose variable in config to some value
          - if [ "$bamboo_ci_script_verbose" != "" ]; then
          -     set -x
          - fi
          #
          # Define Architecture and Release
          - rm -f README.SourceVersion.txt
          - echo "# Version Information for this version as built by NetDEF CI system" >> README.SourceVersion.txt
          - echo "# -----------------------------------------------------------------" >> README.SourceVersion.txt
          - echo "#" >> README.SourceVersion.txt
          - echo "# "
          - if [ "$bamboo_github_repo" != "" ]; then
          -     if [ "$bamboo_github_pullreq" != "" ]; then
          -         echo "Source_GIT_URL='https://github.com/${bamboo_github_repo}/pull/${bamboo_github_pullreq}'" >> README.SourceVersion.txt
          -     else
          -         echo "Source_GIT_URL='https://github.com/${bamboo_github_repo}'" >> README.SourceVersion.txt
          -     fi
          - else
          -     echo "Source_GIT_URL='GitHub (${bamboo_planRepository_1_repositoryUrl})'" >> README.SourceVersion.txt
          - fi
          - gitrev=$(git --git-dir .git rev-parse HEAD 2>/dev/null)
          - echo "Source_GIT_Commit=${gitrev}" >> README.SourceVersion.txt
          - if [ "${bamboo_github_branch}" = "" ]; then
          -     echo "Source_GIT_Branch='${bamboo_repository_branch_name}'" >> README.SourceVersion.txt
          - else
          -     echo "Source_GIT_Branch='${bamboo_github_branch}'" >> README.SourceVersion.txt
          - fi
          - describe=$(git --git-dir .git describe 2>/dev/null)
          - version=`echo ${describe} | cut -d'-' -f 2`
          - if [ "${describe}" = "" ]; then
          -     describe="${bamboo_repository_branch_name}-$(git --git-dir .git describe --always)"
          - fi
          - echo "Source_GIT_Describ=${describe}" >> README.SourceVersion.txt
          - gittime=$(git --git-dir .git log -n1 --format="%ct")
          - echo "Source_GIT_CommitTime_UTC='$(TZ=GMT date -d @${gittime} +%Y%m%d.%H%M%S)'"  >> README.SourceVersion.txt
          - echo "Source_GIT_CommitDate_UTC='$(TZ=GMT date -d @${gittime} +%Y%m%d)'"  >> README.SourceVersion.txt
          - echo -n "CI_Build_Result_URL=" >> README.SourceVersion.txt
          - echo ${bamboo_resultsUrl} | sed -e 's|-CHECKOUT-|-|g' >> README.SourceVersion.txt
          - echo "CI_Build_TimeStamp='${bamboo_buildTimeStamp}'" >> README.SourceVersion.txt
          - echo "CI_Build_TimeStamp_UTC='$(date -d ${bamboo_buildTimeStamp} -u +%Y%m%d.%H%M%S)'" >> README.SourceVersion.txt
          - echo "CI_Build_DateStamp_UTC='$(date -d ${bamboo_buildTimeStamp} -u +%Y%m%d)'" >> README.SourceVersion.txt
          - if [ "${bamboo_github_pullreq}" != "" ]; then
          -     echo "Github_Pull_Request='${bamboo_github_pullreq}'" >> README.SourceVersion.txt
          - fi
          - if [ "${bamboo_github_base_sha}" != "" ]; then
          -     echo "Github_Merge_Base_Commit='${bamboo_github_base_sha}'" >> README.SourceVersion.txt
          - fi


Build_Ubuntu1804_amd64:
  requirements:
    - buildnode_type: lxc
    - arch: amd64

  tasks:
    - artifact-download:
        source-plan: TESTING-TESTLXC
        artifacts:
          - name: SourceVersion

    - script:
        interpreter: shell
        scripts:
          - "#!/usr/bin/env bash"
          # For Debugging define the ci_script_verbose variable in config to some value
          - if [ "$bamboo_ci_script_verbose" != "" ]; then
          -     set -x
          - fi
          #
          - lxcReleaseName=bionic
          - lxcRelease=ubuntu1804
          - lxcArch=amd64
          - lxcTemplate=topotest
          #
          # Define Architecture and Release
          - echo "# " >> README.SourceVersion.txt
          - echo "lxcReleaseName=${lxcReleaseName}" >> README.SourceVersion.txt
          - echo "lxcRelease=${ubuntu1804}" >> README.SourceVersion.txt
          - echo "lxcArch=${lxcArch}" >> README.SourceVersion.txt
          - echo "lxcTemplate=${lxcTemplate}" >> README.SourceVersion.txt
          #
          # Build LXC Directory for Build container
          - cd ContainerImages/ubuntu
          - lxcName=${lxcTemplate}_${lxcRelease}_${lxcArch}
          - rm -rf ${lxcTemplate}
          - distrobuilder build-dir ${lxcTemplate}_ubuntu1804_amd64.yaml ${lxcTemplate} -o image.release=${lxcReleaseName} -o image.arch=${lxcArch}
          #
          # Add README.Sourceversion.txt
          - cp ${bamboo_build_working_directory}/README.SourceVersion.txt ${lxcTemplate}/etc/README.SourceVersion.txt
          #
          # Pack up image
          - distrobuilder build-dir ${lxcTemplate}_ubuntu1804_amd64.yaml ${lxcTemplate}
          #
          # Install new image
          - lxc-stop -n ${lxcName} ?| true
          - lxc-destroy -n ${lxcName} ?| true
          - lxc-create -n ${lxcName} -t local -- --metadata meta.tar.xz --fstree rootfs.tar.xz
          # Add authorized_keys to LXC images
          # root user
          - mkdir /var/lib/lxc/${lxcName}/rootfs/root/.ssh
          - chown 700 /var/lib/lxc/${lxcName}/rootfs/root/.ssh
          - cp ~/.ssh/id_rsa.pub /var/lib/lxc/${lxcName}/rootfs/root/.ssh/authorized_keys
          - chmod 600 /var/lib/lxc/${lxcName}/rootfs/root/.ssh/authorized_keys
          - chown -R root:root /var/lib/lxc/${lxcName}/rootfs/root/.ssh
          # ci user
          - mkdir /var/lib/lxc/${lxcName}/rootfs/home/ci/.ssh
          - chown 700 /var/lib/lxc/${lxcName}/rootfs/home/ci/.ssh
          - cp ~/.ssh/id_rsa.pub /var/lib/lxc/${lxcName}/rootfs/home/ci/.ssh/authorized_keys
          - chmod 600 /var/lib/lxc/${lxcName}/rootfs/home/ci/.ssh/authorized_keys
          - chown -R ci:ci /var/lib/lxc/${lxcName}/rootfs/home/ci/.ssh
          #
          # Fix nodename
          - echo "127.0.1.1   ${lxcName}" > /var/lib/lxc/${lxcName}/rootfs/etc/hostname"
          - echo "127.0.0.1   localhost" >> /var/lib/lxc/${lxcName}/rootfs/etc/hostname"
          - echo "::1         localhost ip6-localhost ip6-loopback" >> /var/lib/lxc/${lxcName}/rootfs/etc/hostname"
          - echo "ff02::1     ip6-allnodes" >> /var/lib/lxc/${lxcName}/rootfs/etc/hostname"
          - echo "ff02::2     ip6-allrouters" >> /var/lib/lxc/${lxcName}/rootfs/etc/hostname"
          - echo "${lxcName}" > /var/lib/lxc/${lxcName}/rootfs/etc/hostname
          #
          # Add SSH Host keys
          - lxc-start ${lxctemplate}
          - lxc-attach ${lxctemplate} -- dpkg-reconfigure openssh-server
          - lxc-attach ${lxctemplate} -- poweroff
          #
          - exit 0
